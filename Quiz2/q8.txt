n=65
Factorial of 65 (Iterative): 9223372036854775808
Time taken (Iterative): 0.006000 milliseconds
Factorial of 65 (Recursive): 9223372036854775808
Time taken (Recursive): 0.003000 milliseconds

--------------------------------------------------------------------------------

n=66
Enter a number to compute its factorial: 66
Factorial of 66 (Iterative): 0
Time taken (Iterative): 0.006000 milliseconds
Factorial of 66 (Recursive): 0
Time taken (Recursive): 0.003000 milliseconds

--------------------------------------------------------------------------------

n=100000
Factorial of 100000 (Iterative): 0
Time taken (Iterative): 0.645000 milliseconds
Factorial of 100000 (Recursive): 0
Time taken (Recursive): 5.891000 milliseconds

--------------------------------------------------------------------------------

n=500000
Factorial of 500000 (Iterative): 0
Time taken (Iterative): 2.828000 milliseconds
Segmentation fault: 11

--------------------------------------------------------------------------------

a) 65


b) overflow meaning its too large to be stored in the data type given so it wraps back to 0.
    this is becasue 66! cannot be stored in 64 bits.


c) yes because I have a 64 bit system they hold the same range of values


d) due to stack size (memory) which is what is used to store info about the program when ran.
    since the number was so large the recursive function would have been called thousands of calls
    each call needs stack space to hold the variable info.


e) for smaller number recursive. As we get higher iterative is better